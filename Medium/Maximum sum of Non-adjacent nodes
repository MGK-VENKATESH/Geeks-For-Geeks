Description:
Given a binary tree with a value associated with each node. Your task is to select a subset of nodes such that the sum of their values is maximized, with the condition that no two selected nodes are directly connected that is, if a node is included in the subset, neither its parent nor its children can be included.

Examples:

Input: root[] = [11, 1, 2]

Output: 11
Explanation: The maximum sum is obtained by selecting the node 11.

Input: root[] = [1, 2, 3, 4, N, 5, 6]

Output: 16
Explanation: The maximum sum is obtained by selecting the nodes 1, 4, 5, and 6, which are not directly connected to each other. Their total sum is 16.  

Constraints:
1 ≤ no. of nodes in the tree ≤ 104
1 ≤ Node.val ≤ 105

Python3:
class Solution:
    def getMaxSum(self, root):
        def helper(node):
            if not node:
                return (0, 0)  # (include, exclude)

            left = helper(node.left)
            right = helper(node.right)

            # If we include this node, we can't include its children
            include = node.data + left[1] + right[1]

            # If we exclude this node, we can freely choose from children (include or exclude)
            exclude = max(left) + max(right)

            return (include, exclude)

        include, exclude = helper(root)
        return max(include, exclude)
