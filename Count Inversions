
Description:
Given an array of integers arr[]. Find the Inversion Count in the array.
Two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 

Examples:

Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).
Input: arr[] = [2, 3, 4, 5, 6]
Output: 0
Explanation: As the sequence is already sorted so there is no inversion count.
Input: arr[] = [10, 10, 10]
Output: 0
Explanation: As all the elements of array are same, so there is no inversion count.
Constraints:
1 â‰¤ arr.size() â‰¤ 105
1 â‰¤ arr[i] â‰¤ 104


Python 3:
class Solution:
    # Function to count inversions in the array.
    def inversionCount(self, arr):
        # Helper function to perform merge sort and count inversions
        def merge_sort_and_count(arr, temp_arr, left, right):
            inversion_count = 0
            if left < right:
                # Find the middle point
                mid = (left + right) // 2
                
                # Count inversions in the left subarray
                inversion_count += merge_sort_and_count(arr, temp_arr, left, mid)
                
                # Count inversions in the right subarray
                inversion_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)
                
                # Count split inversions during merge
                inversion_count += merge_and_count(arr, temp_arr, left, mid, right)
            
            return inversion_count
        
        # Helper function to merge two subarrays and count inversions
        def merge_and_count(arr, temp_arr, left, mid, right):
            i = left    # Starting index for left subarray
            j = mid + 1 # Starting index for right subarray
            k = left    # Starting index to be sorted
            inversion_count = 0
            
            # Merge the two subarrays into temp_arr
            while i <= mid and j <= right:
                if arr[i] <= arr[j]:
                    temp_arr[k] = arr[i]
                    i += 1
                else:
                    # There are (mid - i + 1) inversions because all elements in the
                    # left subarray (arr[i...mid]) are greater than arr[j]
                    temp_arr[k] = arr[j]
                    inversion_count += (mid - i + 1)
                    j += 1
                k += 1
            
            # Copy remaining elements of left subarray, if any
            while i <= mid:
                temp_arr[k] = arr[i]
                i += 1
                k += 1
            
            # Copy remaining elements of right subarray, if any
            while j <= right:
                temp_arr[k] = arr[j]
                j += 1
                k += 1
            
            # Copy the sorted subarray into the original array
            for i in range(left, right + 1):
                arr[i] = temp_arr[i]
            
            return inversion_count
        
        # Initialize a temporary array
        temp_arr = [0] * len(arr)
        # Call the helper function to count inversions
        return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)
