Description:
Given an array of Intervals arr[][], where arr[i] = [starti, endi]. The task is to merge all of the overlapping Intervals.

Examples:

Input: arr[][] = [[1,3],[2,4],[6,8],[9,10]]
Output: [[1,4], [6,8], [9,10]]
Explanation: In the given intervals we have only two overlapping intervals here, [1,3] and [2,4] which on merging will become [1,4]. Therefore we will return [[1,4], [6,8], [9,10]].
Input: arr[][] = [[6,8],[1,9],[2,4],[4,7]]
Output: [[1,9]]
Explanation: In the given intervals all the intervals overlap with the interval [1,9]. Therefore we will return [1,9].
Constraints:
1 ≤ arr.size() ≤ 105
0 ≤ starti ≤ endi ≤ 105


Python3:
class Solution:
    def mergeOverlap(self, arr):
        # If there are no intervals, return an empty list
        if not arr:
            return []
        
        # Step 1: Sort the intervals based on the start time
        arr.sort(key=lambda x: x[0])
        
        # Step 2: Initialize the result list with the first interval
        merged_intervals = [arr[0]]
        
        # Step 3: Iterate through the intervals and merge overlapping ones
        for current in arr[1:]:
            # Get the last interval in the merged list
            last_interval = merged_intervals[-1]
            
            # If the current interval overlaps with the last merged interval
            if current[0] <= last_interval[1]:
                # Merge them by updating the end of the last interval
                last_interval[1] = max(last_interval[1], current[1])
            else:
                # No overlap, so add the current interval to the result list
                merged_intervals.append(current)
        
        return merged_intervals
